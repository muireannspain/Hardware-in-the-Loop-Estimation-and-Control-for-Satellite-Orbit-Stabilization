import matplotlib
matplotlib.use('TkAgg')
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import ( FigureCanvasTkAgg, NavigationToolbar2Tk)
from matplotlib.figure import Figure
from matplotlib.backend_bases import key_press_handler
import matplotlib.animation as animation
import tkinter as tk
import tkinter.ttk as ttk
from matplotlib.figure import Figure
from tkinter import *
import tkinter.messagebox


class gui(tk.Tk):
    def __init__(self, master):
        self.master=master
        self.dummy_function = dummy_function
        self.root = tkinter.Tk()
        #dd in overall title
        self.root.wm_title("Real Time Satellite Visualization")
        #data is initialized
        # Initialize display
        #self.x = np.array([tk.StringVar() for state in dummy_function.N])
        self.y_a = np.array([tk.IntVar() for state in dummy_function.x0])
        self.y_b = np.array([tk.IntVar() for state in dummy_function.x0])
        self.updateGraphs()
        
        #first plot with control input
        self.a = Figure(figsize=(4,4))
        self.plot_a = self.a.add_subplot(111).plot(self.y_a)
        self.a.suptitle("Satellite Path With Control Input")
        
        #second plot without control input
        self.b = Figure(figsize=(4,4))
        self.plot_b = self.b.add_subplot(111).plot(self.y_b)
        self.b.suptitle("Satellite Path Without Control Input")

        #draw the plots on the canvas
        self.canvas1 = FigureCanvasTkAgg(self.a, master=self.root)  # A tk.DrawingArea.
        self.canvas1.draw()
        self.canvas1.get_tk_widget().pack(side=tkinter.LEFT, expand=0)

        self.canvas2 = FigureCanvasTkAgg(self.b, master=self.root)  # A tk.DrawingArea.
        self.canvas2.draw()
        self.canvas2.get_tk_widget().pack(side=tkinter.RIGHT, expand=0)

        
        #add in "STOP" button to terminate process
        button = tkinter.Button(master=self.root, text="Quit", command=quit)
        button.pack(side=tkinter.BOTTOM)
        

    def updateGraphs(self):
        #get the next array from dummy function and update the GUI
        for state_iter in range(len(self.dummy_function.x0)):
            self.state_display[state_iter].set(repr(self.dummy_function.x_true[state_iter]))
            self.canvas1.update()
            self.state_display[state_iter].set(repr(self.dummy_function.x_false[state_iter]))        
            self.canvas2.update()
        '''
        Continuously looping function that updates StringVar objects for GUI
        '''
    #Stop Button
    def _quit(self):
        self.root.quit()     # stops mainloop
        self.root.destroy()  # this is necessary on Windows to prevent
                    # Fatal Python Error: PyEval_RestoreThread: NULL tstate
                    
class dummy_function:
    N=1000
    x_real=np.zeros(N)
    x_false=np.zeros(N)
    x0 = np.random.normal(0,5,(N,1))
    for k in range(N):
        x_real[k] = np.cos(x0[k])
        x_false[k]=np.sin(x0[k])
            
root=gui(tk.Tk)
tkinter.mainloop()
